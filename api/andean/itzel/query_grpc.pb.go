// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: andean/itzel/query.proto

package itzel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName             = "/andean.itzel.Query/Params"
	Query_Price_FullMethodName              = "/andean.itzel.Query/Price"
	Query_PriceAll_FullMethodName           = "/andean.itzel.Query/PriceAll"
	Query_PriceReport_FullMethodName        = "/andean.itzel.Query/PriceReport"
	Query_PriceReportAll_FullMethodName     = "/andean.itzel.Query/PriceReportAll"
	Query_AggregatedPrice_FullMethodName    = "/andean.itzel.Query/AggregatedPrice"
	Query_AggregatedPriceAll_FullMethodName = "/andean.itzel.Query/AggregatedPriceAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Price items.
	Price(ctx context.Context, in *QueryGetPriceRequest, opts ...grpc.CallOption) (*QueryGetPriceResponse, error)
	PriceAll(ctx context.Context, in *QueryAllPriceRequest, opts ...grpc.CallOption) (*QueryAllPriceResponse, error)
	// Queries a list of PriceReport items.
	PriceReport(ctx context.Context, in *QueryGetPriceReportRequest, opts ...grpc.CallOption) (*QueryGetPriceReportResponse, error)
	PriceReportAll(ctx context.Context, in *QueryAllPriceReportRequest, opts ...grpc.CallOption) (*QueryAllPriceReportResponse, error)
	// Queries a list of AggregatedPrice items.
	AggregatedPrice(ctx context.Context, in *QueryGetAggregatedPriceRequest, opts ...grpc.CallOption) (*QueryGetAggregatedPriceResponse, error)
	AggregatedPriceAll(ctx context.Context, in *QueryAllAggregatedPriceRequest, opts ...grpc.CallOption) (*QueryAllAggregatedPriceResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Price(ctx context.Context, in *QueryGetPriceRequest, opts ...grpc.CallOption) (*QueryGetPriceResponse, error) {
	out := new(QueryGetPriceResponse)
	err := c.cc.Invoke(ctx, Query_Price_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceAll(ctx context.Context, in *QueryAllPriceRequest, opts ...grpc.CallOption) (*QueryAllPriceResponse, error) {
	out := new(QueryAllPriceResponse)
	err := c.cc.Invoke(ctx, Query_PriceAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceReport(ctx context.Context, in *QueryGetPriceReportRequest, opts ...grpc.CallOption) (*QueryGetPriceReportResponse, error) {
	out := new(QueryGetPriceReportResponse)
	err := c.cc.Invoke(ctx, Query_PriceReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceReportAll(ctx context.Context, in *QueryAllPriceReportRequest, opts ...grpc.CallOption) (*QueryAllPriceReportResponse, error) {
	out := new(QueryAllPriceReportResponse)
	err := c.cc.Invoke(ctx, Query_PriceReportAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregatedPrice(ctx context.Context, in *QueryGetAggregatedPriceRequest, opts ...grpc.CallOption) (*QueryGetAggregatedPriceResponse, error) {
	out := new(QueryGetAggregatedPriceResponse)
	err := c.cc.Invoke(ctx, Query_AggregatedPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregatedPriceAll(ctx context.Context, in *QueryAllAggregatedPriceRequest, opts ...grpc.CallOption) (*QueryAllAggregatedPriceResponse, error) {
	out := new(QueryAllAggregatedPriceResponse)
	err := c.cc.Invoke(ctx, Query_AggregatedPriceAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Price items.
	Price(context.Context, *QueryGetPriceRequest) (*QueryGetPriceResponse, error)
	PriceAll(context.Context, *QueryAllPriceRequest) (*QueryAllPriceResponse, error)
	// Queries a list of PriceReport items.
	PriceReport(context.Context, *QueryGetPriceReportRequest) (*QueryGetPriceReportResponse, error)
	PriceReportAll(context.Context, *QueryAllPriceReportRequest) (*QueryAllPriceReportResponse, error)
	// Queries a list of AggregatedPrice items.
	AggregatedPrice(context.Context, *QueryGetAggregatedPriceRequest) (*QueryGetAggregatedPriceResponse, error)
	AggregatedPriceAll(context.Context, *QueryAllAggregatedPriceRequest) (*QueryAllAggregatedPriceResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Price(context.Context, *QueryGetPriceRequest) (*QueryGetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Price not implemented")
}
func (UnimplementedQueryServer) PriceAll(context.Context, *QueryAllPriceRequest) (*QueryAllPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceAll not implemented")
}
func (UnimplementedQueryServer) PriceReport(context.Context, *QueryGetPriceReportRequest) (*QueryGetPriceReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceReport not implemented")
}
func (UnimplementedQueryServer) PriceReportAll(context.Context, *QueryAllPriceReportRequest) (*QueryAllPriceReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceReportAll not implemented")
}
func (UnimplementedQueryServer) AggregatedPrice(context.Context, *QueryGetAggregatedPriceRequest) (*QueryGetAggregatedPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregatedPrice not implemented")
}
func (UnimplementedQueryServer) AggregatedPriceAll(context.Context, *QueryAllAggregatedPriceRequest) (*QueryAllAggregatedPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregatedPriceAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Price_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Price(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Price_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Price(ctx, req.(*QueryGetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PriceAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceAll(ctx, req.(*QueryAllPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPriceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PriceReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceReport(ctx, req.(*QueryGetPriceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceReportAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPriceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceReportAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PriceReportAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceReportAll(ctx, req.(*QueryAllPriceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregatedPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAggregatedPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregatedPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AggregatedPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregatedPrice(ctx, req.(*QueryGetAggregatedPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregatedPriceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAggregatedPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregatedPriceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AggregatedPriceAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregatedPriceAll(ctx, req.(*QueryAllAggregatedPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "andean.itzel.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Price",
			Handler:    _Query_Price_Handler,
		},
		{
			MethodName: "PriceAll",
			Handler:    _Query_PriceAll_Handler,
		},
		{
			MethodName: "PriceReport",
			Handler:    _Query_PriceReport_Handler,
		},
		{
			MethodName: "PriceReportAll",
			Handler:    _Query_PriceReportAll_Handler,
		},
		{
			MethodName: "AggregatedPrice",
			Handler:    _Query_AggregatedPrice_Handler,
		},
		{
			MethodName: "AggregatedPriceAll",
			Handler:    _Query_AggregatedPriceAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "andean/itzel/query.proto",
}
