// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: andean/inti/tx.proto

package inti

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName             = "/andean.inti.Msg/UpdateParams"
	Msg_CreateLazyBridgeTransfer_FullMethodName = "/andean.inti.Msg/CreateLazyBridgeTransfer"
	Msg_UpdateLazyBridgeTransfer_FullMethodName = "/andean.inti.Msg/UpdateLazyBridgeTransfer"
	Msg_DeleteLazyBridgeTransfer_FullMethodName = "/andean.inti.Msg/DeleteLazyBridgeTransfer"
	Msg_InitiateBridgeTransfer_FullMethodName   = "/andean.inti.Msg/InitiateBridgeTransfer"
	Msg_ConfirmBridgeTransfer_FullMethodName    = "/andean.inti.Msg/ConfirmBridgeTransfer"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateLazyBridgeTransfer(ctx context.Context, in *MsgCreateLazyBridgeTransfer, opts ...grpc.CallOption) (*MsgCreateLazyBridgeTransferResponse, error)
	UpdateLazyBridgeTransfer(ctx context.Context, in *MsgUpdateLazyBridgeTransfer, opts ...grpc.CallOption) (*MsgUpdateLazyBridgeTransferResponse, error)
	DeleteLazyBridgeTransfer(ctx context.Context, in *MsgDeleteLazyBridgeTransfer, opts ...grpc.CallOption) (*MsgDeleteLazyBridgeTransferResponse, error)
	InitiateBridgeTransfer(ctx context.Context, in *MsgInitiateBridgeTransfer, opts ...grpc.CallOption) (*MsgInitiateBridgeTransferResponse, error)
	ConfirmBridgeTransfer(ctx context.Context, in *MsgConfirmBridgeTransfer, opts ...grpc.CallOption) (*MsgConfirmBridgeTransferResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateLazyBridgeTransfer(ctx context.Context, in *MsgCreateLazyBridgeTransfer, opts ...grpc.CallOption) (*MsgCreateLazyBridgeTransferResponse, error) {
	out := new(MsgCreateLazyBridgeTransferResponse)
	err := c.cc.Invoke(ctx, Msg_CreateLazyBridgeTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateLazyBridgeTransfer(ctx context.Context, in *MsgUpdateLazyBridgeTransfer, opts ...grpc.CallOption) (*MsgUpdateLazyBridgeTransferResponse, error) {
	out := new(MsgUpdateLazyBridgeTransferResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateLazyBridgeTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteLazyBridgeTransfer(ctx context.Context, in *MsgDeleteLazyBridgeTransfer, opts ...grpc.CallOption) (*MsgDeleteLazyBridgeTransferResponse, error) {
	out := new(MsgDeleteLazyBridgeTransferResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteLazyBridgeTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitiateBridgeTransfer(ctx context.Context, in *MsgInitiateBridgeTransfer, opts ...grpc.CallOption) (*MsgInitiateBridgeTransferResponse, error) {
	out := new(MsgInitiateBridgeTransferResponse)
	err := c.cc.Invoke(ctx, Msg_InitiateBridgeTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmBridgeTransfer(ctx context.Context, in *MsgConfirmBridgeTransfer, opts ...grpc.CallOption) (*MsgConfirmBridgeTransferResponse, error) {
	out := new(MsgConfirmBridgeTransferResponse)
	err := c.cc.Invoke(ctx, Msg_ConfirmBridgeTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateLazyBridgeTransfer(context.Context, *MsgCreateLazyBridgeTransfer) (*MsgCreateLazyBridgeTransferResponse, error)
	UpdateLazyBridgeTransfer(context.Context, *MsgUpdateLazyBridgeTransfer) (*MsgUpdateLazyBridgeTransferResponse, error)
	DeleteLazyBridgeTransfer(context.Context, *MsgDeleteLazyBridgeTransfer) (*MsgDeleteLazyBridgeTransferResponse, error)
	InitiateBridgeTransfer(context.Context, *MsgInitiateBridgeTransfer) (*MsgInitiateBridgeTransferResponse, error)
	ConfirmBridgeTransfer(context.Context, *MsgConfirmBridgeTransfer) (*MsgConfirmBridgeTransferResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateLazyBridgeTransfer(context.Context, *MsgCreateLazyBridgeTransfer) (*MsgCreateLazyBridgeTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLazyBridgeTransfer not implemented")
}
func (UnimplementedMsgServer) UpdateLazyBridgeTransfer(context.Context, *MsgUpdateLazyBridgeTransfer) (*MsgUpdateLazyBridgeTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLazyBridgeTransfer not implemented")
}
func (UnimplementedMsgServer) DeleteLazyBridgeTransfer(context.Context, *MsgDeleteLazyBridgeTransfer) (*MsgDeleteLazyBridgeTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLazyBridgeTransfer not implemented")
}
func (UnimplementedMsgServer) InitiateBridgeTransfer(context.Context, *MsgInitiateBridgeTransfer) (*MsgInitiateBridgeTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateBridgeTransfer not implemented")
}
func (UnimplementedMsgServer) ConfirmBridgeTransfer(context.Context, *MsgConfirmBridgeTransfer) (*MsgConfirmBridgeTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmBridgeTransfer not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateLazyBridgeTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateLazyBridgeTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateLazyBridgeTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateLazyBridgeTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateLazyBridgeTransfer(ctx, req.(*MsgCreateLazyBridgeTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateLazyBridgeTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateLazyBridgeTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateLazyBridgeTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateLazyBridgeTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateLazyBridgeTransfer(ctx, req.(*MsgUpdateLazyBridgeTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteLazyBridgeTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteLazyBridgeTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteLazyBridgeTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteLazyBridgeTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteLazyBridgeTransfer(ctx, req.(*MsgDeleteLazyBridgeTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitiateBridgeTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitiateBridgeTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitiateBridgeTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_InitiateBridgeTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitiateBridgeTransfer(ctx, req.(*MsgInitiateBridgeTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmBridgeTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmBridgeTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmBridgeTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ConfirmBridgeTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmBridgeTransfer(ctx, req.(*MsgConfirmBridgeTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "andean.inti.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateLazyBridgeTransfer",
			Handler:    _Msg_CreateLazyBridgeTransfer_Handler,
		},
		{
			MethodName: "UpdateLazyBridgeTransfer",
			Handler:    _Msg_UpdateLazyBridgeTransfer_Handler,
		},
		{
			MethodName: "DeleteLazyBridgeTransfer",
			Handler:    _Msg_DeleteLazyBridgeTransfer_Handler,
		},
		{
			MethodName: "InitiateBridgeTransfer",
			Handler:    _Msg_InitiateBridgeTransfer_Handler,
		},
		{
			MethodName: "ConfirmBridgeTransfer",
			Handler:    _Msg_ConfirmBridgeTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "andean/inti/tx.proto",
}
